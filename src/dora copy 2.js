import * as YUKA from "yuka";
import { findPath } from "./algorithm.js";

export let path = new YUKA.Path();

// A class to build our road segments that I will use to calculate safety scores
class RoadSegment {
  constructor({
    roadCondition,
    trafficDensity,
    visibility,
    accidentHistory,
    pedestrianDensity,
    speedLimit,
    proximityToSensitiveAreas,
    emergencyResponseAccessibility,
    vehicleMix,
    roadWidth,
    trafficSignalDensity,
    pedestrianInfrastructure,
    schoolZoneProximity,
    constructionZones,
    timeOfDay,
    publicEventProximity,
    weatherConditions,
    signalTiming,
    publicTransportProximity,
    wildlifeCrossing,
    localDrivingCulture,
    alternativeRoutesAvailability,
    networkConnectivity,
  }) {
    this.roadCondition = roadCondition;
    this.trafficDensity = trafficDensity;
    this.visibility = visibility;
    this.accidentHistory = accidentHistory;
    this.pedestrianDensity = pedestrianDensity;
    this.speedLimit = speedLimit;
    this.proximityToSensitiveAreas = proximityToSensitiveAreas;
    this.emergencyResponseAccessibility = emergencyResponseAccessibility;
    this.vehicleMix = vehicleMix;
    this.roadWidth = roadWidth;
    this.trafficSignalDensity = trafficSignalDensity;
    this.pedestrianInfrastructure = pedestrianInfrastructure;
    this.schoolZoneProximity = schoolZoneProximity;
    this.constructionZones = constructionZones;
    this.timeOfDay = timeOfDay;
    this.publicEventProximity = publicEventProximity;
    this.weatherConditions = weatherConditions;
    this.signalTiming = signalTiming;
    this.publicTransportProximity = publicTransportProximity;
    this.wildlifeCrossing = wildlifeCrossing;
    this.localDrivingCulture = localDrivingCulture;
    this.alternativeRoutesAvailability = alternativeRoutesAvailability;
    this.networkConnectivity = networkConnectivity;
  }
}

// Here's the waypoints for townA, that I will then update to include safety scores and distances
export let waypoints = {
  A: {
    coordinates: new YUKA.Vector3(-0.0908522829413414, 0, 3.062549591064453),
    neighbours: ["D"],
  },
  B: {
    coordinates: new YUKA.Vector3(-4.258955001831055, 0, 2.4583702087402344),
    neighbours: ["M", "C"],
  },
  C: {
    coordinates: new YUKA.Vector3(-3.6725292205810547, 0, 2.4583702087402344),
    neighbours: ["B", "D", "L"],
  },
  D: {
    coordinates: new YUKA.Vector3(-0.18015336990356445, 0, 2.4583702087402344),
    neighbours: ["A", "C", "J", "K", "E"],
  },
  E: {
    coordinates: new YUKA.Vector3(2.6552371978759766, 0, 2.4583702087402344),
    neighbours: ["F", "D", "H"],
  },
  F: {
    coordinates: new YUKA.Vector3(3.478020191192627, 0, 2.4583702087402344),
    neighbours: ["E", "G"],
  },
  G: {
    coordinates: new YUKA.Vector3(3.478020191192627, 0, 1.19381844997406),
    neighbours: ["F", "H", "T"],
  },
  H: {
    coordinates: new YUKA.Vector3(2.0038840770721436, 0, 1.19381844997406),
    neighbours: ["E", "G", "R", "S"],
  },
  I: {
    coordinates: new YUKA.Vector3(0.6296098232269287, 0, 1.19381844997406),
    neighbours: ["D", "H", "J", "R"],
  },
  J: {
    coordinates: new YUKA.Vector3(-0.11812174320220947, 0, 1.19381844997406),
    neighbours: ["D", "I", "K", "Q"],
  },
  K: {
    coordinates: new YUKA.Vector3(-0.7302283644676208, 0, 1.19381844997406),
    neighbours: ["D", "J", "L", "P"],
  },
  L: {
    coordinates: new YUKA.Vector3(-3.1584267616271973, 0, 1.19381844997406),
    neighbours: ["C", "M", "O", "K"],
  },
  M: {
    coordinates: new YUKA.Vector3(-4.201684951782227, 0, 1.19381844997406),
    neighbours: ["N", "L"],
  },
  N: {
    coordinates: new YUKA.Vector3(-4.201684951782227, 0, -0.10426831245422363),
    neighbours: ["O", "V", "M"],
  },
  O: {
    coordinates: new YUKA.Vector3(-2.720555305480957, 0, -0.10426831245422363),
    neighbours: ["N", "V", "L", "Y", "P"],
  },
  P: {
    coordinates: new YUKA.Vector3(-1.3455042839050293, 0, -0.10426831245422363),
    neighbours: ["Y", "O", "K", "Q"],
  },
  Q: {
    coordinates: new YUKA.Vector3(-0.114859938621521, 0, -0.10426831245422363),
    neighbours: ["P", "J", "R", "Z"],
  },
  R: {
    coordinates: new YUKA.Vector3(1.240871787071228, 0, -0.10426831245422363),
    neighbours: ["Q", "I", "H", "S", "AA"],
  },
  S: {
    coordinates: new YUKA.Vector3(2.5966243743896484, 0, -0.10426831245422363),
    neighbours: ["U", "R", "H", "T"],
  },
  T: {
    coordinates: new YUKA.Vector3(3.485111951828003, 0, -0.10426831245422363),
    neighbours: ["U", "S", "G"],
  },
  U: {
    coordinates: new YUKA.Vector3(2.8128910064697266, 0, -0.7648482322692871),
    neighbours: ["AB", "AC", "S", "T"],
  },
  V: {
    coordinates: new YUKA.Vector3(-3.625488042831421, 0, -0.9578653573989868),
    neighbours: ["O", "N", "W", "X", "Y"],
  },
  W: {
    coordinates: new YUKA.Vector3(-4.4565749168396, 0, -1.7634589672088623),
    neighbours: ["V", "X"],
  },
  X: {
    coordinates: new YUKA.Vector3(-3.069730281829834, 0, -1.7634589672088623),
    neighbours: ["W", "V", "Y", "AF"],
  },
  Y: {
    coordinates: new YUKA.Vector3(-2.1570639610290527, 0, -1.7634589672088623),
    neighbours: ["AF", "X", "O", "P", "Z"],
  },
  Z: {
    coordinates: new YUKA.Vector3(-0.1685734987258911, 0, -1.7634589672088623),
    neighbours: ["Y", "Q", "AA", "AE"],
  },
  AA: {
    coordinates: new YUKA.Vector3(0.4177762269973755, 0, -1.7634589672088623),
    neighbours: ["Z", "AE", "AB", "R"],
  },
  AB: {
    coordinates: new YUKA.Vector3(1.9218908548355103, 0, -1.7634589672088623),
    neighbours: ["AA", "U", "AC", "AD"],
  },
  AC: {
    coordinates: new YUKA.Vector3(3.2002806663513184, 0, -1.7634589672088623),
    neighbours: ["AD", "AB", "U"],
  },
  AD: {
    coordinates: new YUKA.Vector3(1.711462140083313, 0, -2.316910982131958),
    neighbours: ["AE", "AB", "AC"],
  },
  AE: {
    coordinates: new YUKA.Vector3(-0.06288325786590576, 0, -2.8165829181671143),
    neighbours: ["AG", "AD", "AA", "Z", "AF"],
  },
  AF: {
    coordinates: new YUKA.Vector3(-2.647921085357666, 0, -2.8165829181671143),
    neighbours: ["X", "Y", "AE"],
  },
  AG: {
    coordinates: new YUKA.Vector3(-0.18015336990356445, 0, -3.4386234283447266),
    neighbours: ["AE"],
  },
};

// The road segments for townA, allowing calculation of safety scores and bi-directional travel
export let roadSegments = {
  "A-D": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "B-M": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "B-C": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "C-B": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "C-D": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "C-L": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "D-A": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "D-C": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "D-J": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "D-K": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "D-L": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "D-E": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "E-F": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "E-D": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "E-H": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "F-E": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "F-G": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "G-F": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "G-H": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "G-T": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "H-E": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "H-G": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "H-R": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "H-S": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "I-D": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "I-H": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "I-J": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "I-R": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "J-D": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "J-I": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "J-K": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "J-Q": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "K-D": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "K-J": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "K-L": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "K-P": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "L-C": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "L-M": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "L-O": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "L-K": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "M-N": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "M-L": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "N-O": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "N-V": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "N-M": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "O-N": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "O-V": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "O-L": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "O-Y": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "O-P": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "P-Y": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "P-O": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "P-K": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "P-Q": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Q-P": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Q-J": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Q-R": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Q-Z": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "R-Q": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "R-I": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "R-H": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "R-S": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "R-AA": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "S-U": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "S-R": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "S-H": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "S-T": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "T-U": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "T-S": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "T-G": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "U-AB": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "U-AC": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "U-S": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "U-T": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "V-O": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "V-N": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "V-W": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "V-X": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "V-Y": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "W-V": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "W-X": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "X-W": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "X-V": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "X-Y": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "X-AF": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Y-AF": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Y-X": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Y-O": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Y-P": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Y-Z": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Z-Y": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Z-Q": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Z-AA": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "Z-AE": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AA-Z": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AA-AE": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AA-AB": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AA-R": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AB-AA": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AB-U": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AB-AC": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AB-AD": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AC-AD": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AC-AB": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AC-U": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AD-AE": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AD-AB": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AD-AC": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AE-AG": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AE-AD": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AE-AA": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AE-Z": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AE-AF": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AF-X": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AF-Y": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AF-AE": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
  "AG-AE": new RoadSegment(
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    3,
    2,
    4,
    3,
    5,
    1,
    2,
    3
  ),
};

function calculateSafetyScore({
  roadCondition,
  trafficDensity,
  visibility,
  accidentHistory,
  pedestrianDensity,
  speedLimit,
  proximityToSensitiveAreas,
  emergencyResponseAccessibility,
  vehicleMix,
  roadWidth,
  trafficSignalDensity,
  pedestrianInfrastructure,
  schoolZoneProximity,
  constructionZones,
  timeOfDay,
  publicEventProximity,
  weatherConditions,
  signalTiming,
  publicTransportProximity,
  wildlifeCrossing,
  localDrivingCulture,
  alternativeRoutesAvailability,
  networkConnectivity,
}) {
  let score = 0;

  // Define weights for each factor
  const weights = {
    roadCondition: 1.5,
    trafficDensity: 1.2,
    visibility: 1.0,
    accidentHistory: 1.8,
    pedestrianDensity: 2.0,
    speedLimit: 1.1,
    proximityToSensitiveAreas: 2.5,
    emergencyResponseAccessibility: 1.3,
    vehicleMix: 1.0,
    roadWidth: 1.1,
    trafficSignalDensity: 1.0,
    pedestrianInfrastructure: 1.4,
    schoolZoneProximity: 2.0,
    constructionZones: 1.6,
    timeOfDay: 1.2,
    publicEventProximity: 1.3,
    weatherConditions: 1.5,
    signalTiming: 1.1,
    publicTransportProximity: 1.2,
    wildlifeCrossing: 1.7,
    localDrivingCulture: 1.4,
    alternativeRoutesAvailability: 1.0,
    networkConnectivity: 1.2,
  };

  // Calculate the contribution of each factor
  score += roadCondition * weights.roadCondition;
  score += trafficDensity * weights.trafficDensity;
  score += visibility * weights.visibility;
  score += accidentHistory * weights.accidentHistory;
  score += pedestrianDensity * weights.pedestrianDensity;
  score += speedLimit * weights.speedLimit;
  score += proximityToSensitiveAreas * weights.proximityToSensitiveAreas;
  score +=
    emergencyResponseAccessibility * weights.emergencyResponseAccessibility;
  score += vehicleMix * weights.vehicleMix;
  score += roadWidth * weights.roadWidth;
  score += trafficSignalDensity * weights.trafficSignalDensity;
  score += pedestrianInfrastructure * weights.pedestrianInfrastructure;
  score += schoolZoneProximity * weights.schoolZoneProximity;
  score += constructionZones * weights.constructionZones;
  score += timeOfDay * weights.timeOfDay;
  score += publicEventProximity * weights.publicEventProximity;
  score += weatherConditions * weights.weatherConditions;
  score += signalTiming * weights.signalTiming;
  score += publicTransportProximity * weights.publicTransportProximity;
  score += wildlifeCrossing * weights.wildlifeCrossing;
  score += localDrivingCulture * weights.localDrivingCulture;
  score +=
    alternativeRoutesAvailability * weights.alternativeRoutesAvailability;
  score += networkConnectivity * weights.networkConnectivity;

  // Normalize the score to a scale of 0-10
  let maxPossibleScore = Object.values(weights).reduce((a, b) => a + b) * 5; // Assuming each factor is rated out of 5
  let normalizedScore = (score / maxPossibleScore) * 10;

  return normalizedScore;
}

// Function to calculate our safety scores
function calculateSafetyScore(roadSegment) {
  // Implement the safety score calculation logic
  return (
    roadSegment.roadCondition +
    roadSegment.trafficDensity +
    roadSegment.visibility +
    roadSegment.accidentHistory +
    roadSegment.pedestrianDensity
  );
}

// Function to calculate the distances between our nodes
function calculateDistance(point1, point2) {
  let dx = point1.x - point2.x;
  let dy = point1.y - point2.y;
  return Math.sqrt(dx * dx + dy * dy);
}

// Function to integrate safety scores and distances into the waypoints
export function integrateSafetyScoresAndDistances() {
  for (let waypoint in waypoints) {
    waypoints[waypoint].neighbours = waypoints[waypoint].neighbours.map(
      (neighbour) => {
        // Extract the neighbour ID whether it's a string or an object
        let neighbourId =
          typeof neighbour === "object" ? neighbour.id : neighbour;

        let segmentKey = waypoint + "-" + neighbourId;
        let roadSegment = roadSegments[segmentKey];
        let safetyScore = roadSegment
          ? calculateSafetyScore(roadSegment)
          : null;
        let distance = 1; // Replace with the actual distance calculation

        return { id: neighbourId, safetyScore, distance };
      }
    );
  }
}

// // Start point
// waypoints["A"] = {
//   coordinates: new YUKA.Vector3(-0.0908522829413414, 0, 3.062549591064453),
//   weight: getRandomWeight(),
//   neighbours: ["D"],
// };
// //Adding the coordinates to the path

// // Row 1
// waypoints["B"] = {
//   coordinates: new YUKA.Vector3(-4.258955001831055, 0, 2.4583702087402344),
//   weight: getRandomWeight(),
//   neighbours: ["M", "C"],
// };
// waypoints["C"] = {
//   coordinates: new YUKA.Vector3(-3.6725292205810547, 0, 2.4583702087402344),
//   weight: getRandomWeight(),
//   neighbours: ["B", "D", "L"],
// };
// waypoints["D"] = {
//   coordinates: new YUKA.Vector3(-0.18015336990356445, 0, 2.4583702087402344),
//   weight: getRandomWeight(),
//   neighbours: ["A", "C", "J", "K", "L", "E"],
// };
// waypoints["E"] = {
//   coordinates: new YUKA.Vector3(2.6552371978759766, 0, 2.4583702087402344),
//   weight: getRandomWeight(),
//   neighbours: ["F", "D", "H"],
// };
// waypoints["F"] = {
//   coordinates: new YUKA.Vector3(3.478020191192627, 0, 2.4583702087402344),
//   weight: getRandomWeight(),
//   neighbours: ["E", "G"],
// };

// // Row 2
// waypoints["G"] = {
//   coordinates: new YUKA.Vector3(3.478020191192627, 0, 1.19381844997406),
//   weight: getRandomWeight(),
//   neighbours: ["F", "H", "T"],
// };
// waypoints["H"] = {
//   coordinates: new YUKA.Vector3(2.0038840770721436, 0, 1.19381844997406),
//   weight: getRandomWeight(),
//   neighbours: ["E", "G", "R", "S"],
// };
// waypoints["I"] = {
//   coordinates: new YUKA.Vector3(0.6296098232269287, 0, 1.19381844997406),
//   weight: getRandomWeight(),
//   neighbours: ["D", "H", "J", "R"],
// };
// waypoints["J"] = {
//   coordinates: new YUKA.Vector3(-0.11812174320220947, 0, 1.19381844997406),
//   weight: getRandomWeight(),
//   neighbours: ["D", "I", "K", "Q"],
// };
// waypoints["K"] = {
//   coordinates: new YUKA.Vector3(-0.7302283644676208, 0, 1.19381844997406),
//   weight: getRandomWeight(),
//   neighbours: ["D", "J", "L", "P"],
// };
// waypoints["L"] = {
//   coordinates: new YUKA.Vector3(-3.1584267616271973, 0, 1.19381844997406),
//   weight: getRandomWeight(),
//   neighbours: ["C", "M", "O", "K"],
// };
// waypoints["M"] = {
//   coordinates: new YUKA.Vector3(-4.201684951782227, 0, 1.19381844997406),
//   weight: getRandomWeight(),
//   neighbours: ["N", "L"],
// };

// // Row 3
// waypoints["N"] = {
//   coordinates: new YUKA.Vector3(-4.201684951782227, 0, -0.10426831245422363),
//   weight: getRandomWeight(),
//   neighbours: ["O", "V", "M"],
// };
// waypoints["O"] = {
//   coordinates: new YUKA.Vector3(-2.720555305480957, 0, -0.10426831245422363),
//   weight: getRandomWeight(),
//   neighbours: ["N", "V", "L", "Y", "P"],
// };
// waypoints["P"] = {
//   coordinates: new YUKA.Vector3(-1.3455042839050293, 0, -0.10426831245422363),
//   weight: getRandomWeight(),
//   neighbours: ["Y", "O", "K", "Q"],
// };
// waypoints["Q"] = {
//   coordinates: new YUKA.Vector3(-0.114859938621521, 0, -0.10426831245422363),
//   weight: getRandomWeight(),
//   neighbours: ["P", "J", "R", "Z"],
// };
// waypoints["R"] = {
//   coordinates: new YUKA.Vector3(1.240871787071228, 0, -0.10426831245422363),
//   weight: getRandomWeight(),
//   neighbours: ["Q", "I", "H", "S", "AA"],
// };
// waypoints["S"] = {
//   coordinates: new YUKA.Vector3(2.5966243743896484, 0, -0.10426831245422363),
//   weight: getRandomWeight(),
//   neighbours: ["U", "R", "H", "T"],
// };
// waypoints["T"] = {
//   coordinates: new YUKA.Vector3(3.485111951828003, 0, -0.10426831245422363),
//   weight: getRandomWeight(),
//   neighbours: ["U", "S", "G"],
// };

// // Row 4
// waypoints["U"] = {
//   coordinates: new YUKA.Vector3(2.8128910064697266, 0, -0.7648482322692871),
//   weight: getRandomWeight(),
//   neighbours: ["AB", "AC", "S", "T"],
// };
// waypoints["V"] = {
//   coordinates: new YUKA.Vector3(-3.625488042831421, 0, -0.9578653573989868),
//   weight: getRandomWeight(),
//   neighbours: ["O", "N", "W", "X", "Y"],
// };

// // Row 5
// waypoints["W"] = {
//   coordinates: new YUKA.Vector3(-4.4565749168396, 0, -1.7634589672088623),
//   weight: getRandomWeight(),
//   neighbours: ["V", "X"],
// };
// waypoints["X"] = {
//   coordinates: new YUKA.Vector3(-3.069730281829834, 0, -1.7634589672088623),
//   weight: getRandomWeight(),
//   neighbours: ["W", "V", "Y", "AF"],
// };
// waypoints["Y"] = {
//   coordinates: new YUKA.Vector3(-2.1570639610290527, 0, -1.7634589672088623),
//   weight: getRandomWeight(),
//   neighbours: ["AF", "X", "O", "P", "Z"],
// };
// waypoints["Z"] = {
//   coordinates: new YUKA.Vector3(-0.1685734987258911, 0, -1.7634589672088623),
//   weight: getRandomWeight(),
//   neighbours: ["Y", "Q", "AA", "AE"],
// };
// waypoints["AA"] = {
//   coordinates: new YUKA.Vector3(0.4177762269973755, 0, -1.7634589672088623),
//   weight: getRandomWeight(),
//   neighbours: ["Z", "AE", "AB", "R"],
// };
// waypoints["AB"] = {
//   coordinates: new YUKA.Vector3(1.9218908548355103, 0, -1.7634589672088623),
//   weight: getRandomWeight(),
//   neighbours: ["AA", "U", "AC", "AD"],
// };
// waypoints["AC"] = {
//   coordinates: new YUKA.Vector3(3.2002806663513184, 0, -1.7634589672088623),
//   weight: getRandomWeight(),
//   neighbours: ["AD", "AB", "U"],
// };
// waypoints["AD"] = {
//   coordinates: new YUKA.Vector3(1.711462140083313, 0, -2.316910982131958),
//   weight: getRandomWeight(),
//   neighbours: ["AE", "AB", "AC"],
// };

// // Row 6
// waypoints["AE"] = {
//   coordinates: new YUKA.Vector3(-0.06288325786590576, 0, -2.8165829181671143),
//   weight: getRandomWeight(),
//   neighbours: ["AG", "AD", "AA", "Z", "AF"],
// };
// waypoints["AF"] = {
//   coordinates: new YUKA.Vector3(-2.647921085357666, 0, -2.8165829181671143),
//   weight: getRandomWeight(),
//   neighbours: ["X", "Y", "AE"],
// };
// waypoints["AG"] = {
//   coordinates: new YUKA.Vector3(-0.18015336990356445, 0, -3.4386234283447266),
//   weight: getRandomWeight(),
//   neighbours: ["AE"],
// };

// Randomise the weights of the waypoints
export function randomiseWeights() {
  for (let key in waypoints) {
    waypoints[key].weight = getRandomWeight();
  }
  console.log("waypoints rand vals", waypoints);
}

export let meshIslands = {
  A1: { nodes: ["B", "C", "M", "L"], meshIslandWeight: null },
  A2: { nodes: ["C", "L", "K", "D"], meshIslandWeight: null },
  A3: { nodes: ["D", "J", "K"], meshIslandWeight: null },
  A4: { nodes: ["J", "I", "D"], meshIslandWeight: null },
  A5: { nodes: ["D", "I", "H", "E"], meshIslandWeight: null },
  A6: { nodes: ["E", "F", "G", "H"], meshIslandWeight: null },

  B1: { nodes: ["N", "L", "M", "O"], meshIslandWeight: null },
  B2: { nodes: ["O", "L", "P", "K"], meshIslandWeight: null },
  B3: { nodes: ["P", "K", "Q", "J"], meshIslandWeight: null },
  B4: { nodes: ["Q", "R", "J", "I"], meshIslandWeight: null },
  B5: { nodes: ["R", "I", "H"], meshIslandWeight: null },
  B6: { nodes: ["R", "S", "H"], meshIslandWeight: null },
  B7: { nodes: ["S", "T", "H", "G"], meshIslandWeight: null },

  C1: { nodes: ["W", "X", "V"], meshIslandWeight: null },
  C2: { nodes: ["V", "O", "N"], meshIslandWeight: null },
  C3: { nodes: ["V", "X", "O", "Y"], meshIslandWeight: null },
  C4: { nodes: ["Y", "O", "P"], meshIslandWeight: null },
  C5: { nodes: ["Y", "Z", "P", "Q"], meshIslandWeight: null },
  C6: { nodes: ["Z", "Q", "R", "AA"], meshIslandWeight: null },
  C7: { nodes: ["AA", "AB", "R", "U", "S"], meshIslandWeight: null },
  C8: { nodes: ["AB", "AC", "U"], meshIslandWeight: null },
  C9: { nodes: ["U", "S", "T"], meshIslandWeight: null },

  D1: { nodes: ["AF", "X", "Y"], meshIslandWeight: null },
  D2: { nodes: ["AF", "AE", "Y", "Z"], meshIslandWeight: null },
  D3: { nodes: ["AE", "Z", "AA"], meshIslandWeight: null },
  D4: { nodes: ["AE", "AA", "AD", "AB"], meshIslandWeight: null },
  D5: { nodes: ["AD", "AB", "AC"], meshIslandWeight: null },
};

// List of waypoint IDs
export let waypointIds = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "AA",
  "AB",
  "AC",
  "AD",
  "AE",
  "AF",
  "AG",
];

// Set the weight of specific waypoints
export function setWeight(waypointId, weight) {
  if (waypoints[waypointId]) {
    waypoints[waypointId].weight = weight;
  } else {
    console.error(`Waypoint ${waypointId} does not exist`);
  }
}

// Generate a random number
function getRandomNumber(min, max) {
  return Math.random() * (max - min) + min;
}
// Set my node values to the default framework
export function townADefaultNodes() {
  // First loop - Set all waypoints' weights to a random number between 1 and 2
  for (let key in waypoints) {
    waypoints[key].weight = getRandomNumber(1, 2);
  }

  // Arrays for the second and third loops, now named as mesh islands
  const secondLoopMeshIslands = [
    "D1",
    "D4",
    "C3",
    "C4",
    "C7",
    "B2",
    "B5",
    "B6",
  ];
  const thirdLoopMeshIslands = ["D2", "D3", "C5", "C6", "B3", "B4", "A3", "A4"];

  // Second loop - Update waypoints associated with specified mesh islands to a random number between 2 and 3
  secondLoopMeshIslands.forEach((meshIslandKey) => {
    if (meshIslands[meshIslandKey]) {
      meshIslands[meshIslandKey].nodes.forEach((nodeKey) => {
        if (waypoints[nodeKey]) {
          waypoints[nodeKey].weight = getRandomNumber(2, 3);
        }
      });
    }
  });

  // Third loop - Update waypoints associated with specified mesh islands to a random number between 3 and 4
  thirdLoopMeshIslands.forEach((meshIslandKey) => {
    if (meshIslands[meshIslandKey]) {
      meshIslands[meshIslandKey].nodes.forEach((nodeKey) => {
        if (waypoints[nodeKey]) {
          waypoints[nodeKey].weight = getRandomNumber(3, 4);
        }
      });
    }
  });
}

//FUNCTIONALITY
export function updatePath(startId, endId) {
  const newPathIds = findPath(startId, endId);

  // Reset the path
  path = new YUKA.Path();

  // Add new waypoints to the path
  newPathIds.forEach((waypointId) => {
    if (waypoints[waypointId]) {
      path.add(waypoints[waypointId].coordinates);
    } else {
      console.error(`Waypoint ${waypointId} does not exist`);
    }
  });
}
// TEMPORARY
path.add(waypoints["A"].coordinates);
path.add(waypoints["D"].coordinates);
path.add(waypoints["E"].coordinates);
path.add(waypoints["F"].coordinates);
path.add(waypoints["T"].coordinates);

// Function to generate random weights
function getRandomWeight() {
  return Math.random() * 9 + 1; // Random weight between 1 and 10
}

export function calculateAndUpdateMeshIslandWeights(meshIslands, waypoints) {
  // Calculate weights
  console.log("Waypoints in calculateAndUpdateMeshIslandWeights", waypoints);
  console.log(
    "Mesh islands in calculateAndUpdateMeshIslandWeights",
    meshIslands
  );
  for (let island in meshIslands) {
    let totalWeight = 0;
    let nodeCount = meshIslands[island].nodes.length;

    meshIslands[island].nodes.forEach((node) => {
      if (waypoints[node] && waypoints[node].weight) {
        totalWeight += waypoints[node].weight;
        console.log("mesh island", island, "total weight:", totalWeight);
      } else {
        console.error(`Weight not found for node: ${node}`);
        nodeCount--; // Adjust node count if weight is missing
      }
    });

    if (nodeCount > 0) {
      let meanWeight = totalWeight / nodeCount;
      meshIslands[island].meshIslandWeight = meanWeight;
      // console.log(`Mesh island ${island} has mean weight: ${meanWeight}`);
    } else {
      console.error(`No valid nodes with weights for island: ${island}`);
      meshIslands[island].meshIslandWeight = null;
    }
    // console.log("mesh island ", meshIslands);
  }

  // Convert to array and sort
  let sortedIslands = Object.keys(meshIslands)
    .map((key) => ({ key, ...meshIslands[key] }))
    .sort((a, b) => a.meshIslandWeight - b.meshIslandWeight);
  console.log("random sorted islands", sortedIslands);
  return sortedIslands; // Return the sorted array directly
}

// Example usage:
export let sortedMeshIslands = calculateAndUpdateMeshIslandWeights(
  meshIslands,
  waypoints
);

//roadCondition (1.5): Reflects the quality and maintenance of the road. Poor road conditions can increase the risk of accidents.

// trafficDensity (1.2): High traffic density can lead to congestion and increased accident risk.

// visibility (1.0): Represents how well drivers can see the road and surroundings, affecting reaction times and safety.

// accidentHistory (1.8): Areas with a history of frequent accidents are considered riskier.

// pedestrianDensity (2.0): High pedestrian traffic increases the risk of pedestrian-vehicle collisions.

// speedLimit (1.1): Higher speed limits can increase the severity of accidents.

// proximityToSensitiveAreas (2.5): Proximity to schools, hospitals, or residential areas increases the need for cautious driving.

// emergencyResponseAccessibility (1.3): Easy access for emergency services can reduce the impact of accidents.

// vehicleMix (1.0): The diversity of vehicles (e.g., cars, bikes, trucks) affects driving dynamics and potential hazards.

// roadWidth (1.1): Narrower roads might pose more risks, especially in high-traffic situations.

// trafficSignalDensity (1.0): Adequate signaling can regulate traffic flow and reduce accidents.

// pedestrianInfrastructure (1.4): Good infrastructure for pedestrians (like sidewalks, crossings) enhances safety.

// schoolZoneProximity (2.0): Areas near schools demand extra caution due to the presence of children.

// constructionZones (1.6): Construction areas can be hazardous due to changes in normal traffic patterns and the presence of workers and equipment.

// timeOfDay (1.2): Certain times (like night or rush hours) can be riskier due to visibility issues or heavy traffic.

// publicEventProximity (1.3): Events can significantly alter normal traffic patterns and pedestrian density.

// weatherConditions (1.5): Adverse weather conditions (rain, snow, fog) can affect road safety.

// signalTiming (1.1): Efficiently timed traffic signals improve traffic flow and reduce the risk of accidents.

// publicTransportProximity (1.2): Proximity to public transport can influence pedestrian and vehicle traffic patterns.

// wildlifeCrossing (1.7): Areas prone to wildlife crossing can pose additional risks.

// localDrivingCulture (1.4): Different areas have varying driving behaviors which can impact safety.

// alternativeRoutesAvailability (1.0): Availability of alternative routes can affect traffic density and distribution.

// networkConnectivity (1.2): Well-connected road networks can improve traffic flow and reduce congestion-related risks.

// The weights assigned to each factor represent their relative importance in calculating the overall safety score. The score is then normalized to a 0-10 scale, making it easier to interpret and compare across different road segments.
